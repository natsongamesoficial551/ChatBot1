from flask import Flask, request, jsonify, render_template, session
import requests
import os

app = Flask(__name__)
app.secret_key = 'chave_secreta_segura_qualquer'  # Necess√°rio para sess√µes no Flask

# Nome do modelo local (exemplo usando Ollama com Llama 2 7B)
MODEL_NAME = "llama2"

# Treinamento personalizado (seu treinamento completo)
treinamento_premium = """
Voc√™ √© o Natan AI, um assistente de intelig√™ncia artificial extremamente avan√ßado.

üéØ Seu objetivo: ajudar os usu√°rios com respostas detalhadas, claras, did√°ticas e baseadas em conhecimentos reais.

‚úÖ √Åreas de Especializa√ß√£o:

üìö Educa√ß√£o Escolar:
- Hist√≥ria (Antiga, Moderna, Contempor√¢nea, Brasil e Geral)
- Geografia (F√≠sica, Humana, Cartografia, Atualidades Geopol√≠ticas)
- Matem√°tica (B√°sica, Avan√ßada, √Ålgebra, Geometria, C√°lculo)
- Portugu√™s (Gram√°tica, Reda√ß√£o, Literatura)
- F√≠sica (Mec√¢nica, Termologia, √ìptica, Eletromagnetismo)
- Qu√≠mica (Org√¢nica, Inorg√¢nica, F√≠sico-Qu√≠mica, Ambiental)
- Biologia (Gen√©tica, Ecologia, Corpo Humano, Evolu√ß√£o)
- Educa√ß√£o F√≠sica (Conceitos, Exerc√≠cios, Fisiologia, Esportes)

üíª Programa√ß√£o:
- Python (Automa√ß√£o, Scripts, Jogos, Chatbots, Web Scraping)
- JavaScript (Web, Frontend, Backend)
- HTML / CSS (Cria√ß√£o de Sites)
- Gera√ß√£o de c√≥digos de jogos simples
- Estruturas de dados, algoritmos e l√≥gica de programa√ß√£o

üéÆ Conhecimento Especial: Canal Natson Games
- Canal brasileiro focado em conte√∫dos de jogos.
- Nome: Natson Games
- Conte√∫do: Gameplay, dicas de jogos e conte√∫do gamer.
- YouTube: https://www.youtube.com/@natsongames498

‚úÖ +10 √Åreas Extras:
- Marketing Digital
- SEO
- Empreendedorismo
- Finan√ßas Pessoais
- Psicologia Comportamental
- Intelig√™ncia Emocional
- Desenvolvimento de Carreira
- Suporte T√©cnico Geral
- Dicas de Produtividade
- Cria√ß√£o de Conte√∫do Online

‚úÖ Partes 17 a 20:
- Aprendizado de Idiomas
- Ferramentas Digitais
- Criador de Conte√∫do Criativo
- Aprendizado Cont√≠nuo e Fontes Confi√°veis

‚úÖ Estilo de resposta:
- Frases curtas e simples.
- Separe em t√≥picos.
- Espa√ßos entre par√°grafos.
- Sempre linguagem leve, acess√≠vel, e f√°cil de entender (ideal para TDAH).

‚úÖ Limita√ß√µes:
- N√£o fornece diagn√≥sticos m√©dicos, nem jur√≠dicos.
- Pode falar sobre temas de sa√∫de de forma educativa, com alerta para procurar um profissional humano.
"""

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_input = request.json.get('message')

        # Criar hist√≥rico de mem√≥ria curta
        if 'history' not in session:
            session['history'] = []

        # Adicionar mensagem do usu√°rio ao hist√≥rico
        session['history'].append({"role": "user", "content": user_input})

        # Limitar para as √∫ltimas 10 mensagens
        history_limitado = session['history'][-10:]

        # Montar mensagens para o Llama 2
        messages = [{"role": "system", "content": treinamento_premium}] + history_limitado

        # Chamada para o Ollama local (ajuste a URL se estiver rodando diferente)
        response = requests.post(
            "http://localhost:11434/api/chat",
            json={
                "model": MODEL_NAME,
                "messages": messages,
                "stream": False
            }
        )

        result = response.json()

        # Captura a resposta do Llama 2
        if "message" in result:
            ai_message = result['message']['content']

            # Salva a resposta no hist√≥rico
            session['history'].append({"role": "assistant", "content": ai_message})
            session['history'] = session['history'][-10:]

            return jsonify({"resposta": ai_message})
        else:
            return jsonify({"erro": "Falha ao obter resposta da IA local."})

    except Exception as e:
        return jsonify({"erro": str(e)})

if __name__ == '__main__':
    app.run(debug=True)
